///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Concurrency/IMutex.hpp"
#include <chrono>

///////////////////////////////////////////////////////////////////////////////
// Namespace Plazza
///////////////////////////////////////////////////////////////////////////////
namespace Plazza
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class ICondVar
{
public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual ~ICondVar() = default;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param mutex
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void Wait(IMutex& mutex) = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param mutex
    /// \param relTime
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <class Rep, class Period>
    void WaitFor(
        IMutex& mutex,
        const std::chrono::duration<Rep, Period>& relTime
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void NotifyOne(void) = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void NotifyAll(void) = 0;

protected:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param mutex
    /// \param relTime
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void DoWaitFor(
        IMutex& mutex,
        const std::chrono::milliseconds& relTime
    ) = 0;
};

} // !namespace Plazza
