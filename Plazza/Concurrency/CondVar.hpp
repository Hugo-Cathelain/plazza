///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Concurrency/ICondVar.hpp"
#include "Concurrency/Mutex.hpp"
#include <condition_variable>

///////////////////////////////////////////////////////////////////////////////
// Namespace Plazza
///////////////////////////////////////////////////////////////////////////////
namespace Plazza
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class CondVar : public ICondVar
{
private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    std::condition_variable m_cv;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    CondVar(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~CondVar() override = default;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    CondVar(const CondVar&) = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    CondVar(CondVar&&) = delete;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    CondVar& operator=(const CondVar&) = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    CondVar& operator=(CondVar&&) = delete;

    public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param mutex
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void Wait(IMutex& mutex) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void NotifyOne(void) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void NotifyAll(void) override;

protected:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param mutex
    /// \param relTime
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void DoWaitFor(
        IMutex& mutex,
        const std::chrono::milliseconds& relTime
    ) override;
};

} // !namespace Plazza
