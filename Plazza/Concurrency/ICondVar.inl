///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Concurrency/ICondVar.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace Plazza
///////////////////////////////////////////////////////////////////////////////
namespace Plazza
{

///////////////////////////////////////////////////////////////////////////////
template <class Rep, class Period>
bool ICondVar::WaitFor(
    IMutex& mutex,
    const std::chrono::duration<Rep, Period>& relTime
)
{
    return (this->DoWaitFor(
        mutex,
        std::chrono::duration_cast<std::chrono::milliseconds>(relTime)
    ));
}

///////////////////////////////////////////////////////////////////////////////
template <class Rep, class Period>
bool ICondVar::WaitFor(
    std::unique_lock<std::mutex>& lock,
    const std::chrono::duration<Rep, Period>& timeout
)
{
    return (this->DoWaitFor(
        lock,
        std::chrono::duration_cast<std::chrono::milliseconds>(timeout)
    ));
}

} // !namespace Plazza
