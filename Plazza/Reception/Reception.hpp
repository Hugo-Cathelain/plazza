///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Kitchen/Kitchen.hpp"
#include "Utils/Timer.hpp"
#include "Pizza/IPizza.hpp"
#include "Reception/Parser.hpp"
#include "IPC/Pipe.hpp"
#include <optional>
#include <memory>

#ifndef PLAZZA_BONUS
#define PLAZZA_BONUS
#endif

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
#ifdef PLAZZA_BONUS
    #include <SFML/Graphics.hpp>
    #include <SFML/System.hpp>
    #include <SFML/Window.hpp>
    #include <SFML/Audio.hpp>
#endif

///////////////////////////////////////////////////////////////////////////////
// Namespace Plazza
///////////////////////////////////////////////////////////////////////////////
namespace Plazza
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Reception
{
private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    std::vector<std::shared_ptr<Kitchen>> m_kitchens;   //<!
    std::chrono::milliseconds m_restockTime;            //<!
    size_t m_cookCount;                                 //<!
    std::unique_ptr<Pipe> m_pipe;                       //<!
    Thread m_manager;                                   //<!
    std::atomic<bool> m_shutdown;                       //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param restockTime
    /// \param cookCount
    ///
    ///////////////////////////////////////////////////////////////////////////
    Reception(std::chrono::milliseconds restockTime, size_t cookCount);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~Reception();

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param id
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    std::optional<std::shared_ptr<Kitchen>> GetKitchenByID(size_t id);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void CreateKitchen(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param id
    ///
    ///////////////////////////////////////////////////////////////////////////
    void RemoveKitchen(size_t id);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void ManagerThread(void);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void DisplayStatus(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param orders
    ///
    ///////////////////////////////////////////////////////////////////////////
    void ProcessOrders(const Parser::Orders& orders);

#ifdef PLAZZA_BONUS
private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    Thread m_windowThread;

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void WindowRoutine(void);
#endif
};

} // !namespace Plazza
