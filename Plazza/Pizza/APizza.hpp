///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Pizza/IPizza.hpp"
#include "Pizza/Ingredients.hpp"
#include <chrono>
#include <vector>

///////////////////////////////////////////////////////////////////////////////
// Namespace Plazza
///////////////////////////////////////////////////////////////////////////////
namespace Plazza
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class APizza : public IPizza
{
protected:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    static double s_cookingTimeMultiplier;

protected:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    Type m_type;                            //<!
    Size m_size;                            //<!
    std::chrono::seconds m_baseCookingTime; //<!
    std::vector<Ingredient> m_ingredients;  //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param type
    /// \param size
    /// \param baseCookingTime
    /// \param ingredientsreturn ss.str();
    ///
    ///////////////////////////////////////////////////////////////////////////
    APizza(
        IPizza::Type type,
        IPizza::Size size,
        std::chrono::seconds baseCookingTime,
        const std::vector<Ingredient>& ingredients
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual ~APizza() = default;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual uint16_t Pack(void) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual Type GetType(void) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual Size GetSize(void) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual std::chrono::milliseconds GetCookingTime(void) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual  const std::vector<Ingredient>& GetIngredients(void) const override;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param multiplier
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void SetCookingTimeMultiplier(double multiplier);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static double GetCookingTimeMultiplier(void);
};

} // !namespace Plazza
