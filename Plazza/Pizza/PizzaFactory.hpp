///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Pizza/IPizza.hpp"
#include <unordered_map>
#include <functional>
#include <memory>
#include <vector>

///////////////////////////////////////////////////////////////////////////////
// Namespace Plazza
///////////////////////////////////////////////////////////////////////////////
namespace Plazza
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class PizzaFactory
{
private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    std::unordered_map<
        std::string, std::function<std::shared_ptr<IPizza>(IPizza::Size)>
    > m_factories;          //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    PizzaFactory(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual ~PizzaFactory() = default;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param type
    /// \param size
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    std::shared_ptr<IPizza> CreatePizza(
        const std::string& type,
        IPizza::Size size
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    std::vector<std::string> GetFactoryList(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param type
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool HasFactory(const std::string& type) const;

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param type
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <typename T>
    void RegisterPizza(const std::string& type);
};

} // !namespace Plazza

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
#include "Pizza/PizzaFactory.inl"
