///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Pizza/Ingredients.hpp"
#include "Concurrency/Thread.hpp"
#include "Concurrency/CondVar.hpp"
#include "Utils/Timer.hpp"
#include <chrono>
#include <map>
#include <mutex>

///////////////////////////////////////////////////////////////////////////////
// Namespace Plazza
///////////////////////////////////////////////////////////////////////////////
namespace Plazza
{

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
class Kitchen;

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Stock : public Thread
{
private:
    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    Milliseconds m_restockTime;         //<!
    std::map<Ingredient, int> m_stock;  //<!
    Kitchen& m_kitchen;                 //<!
    Mutex m_mutex;                      //<!
    CondVar m_cv;                       //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param restockTime
    ///
    ///////////////////////////////////////////////////////////////////////////
    Stock(Milliseconds restockTime, Kitchen& kitchen);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~Stock();

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param stockStr
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static std::map<Ingredient, int> Unpack(const std::string& stockStr);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param ingredients
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool TryReserveIngredients(const std::vector<Ingredient>& ingredients);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param ingredients
    /// \param timeout
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool WaitAndReserveIngredients(
        const std::vector<Ingredient>& ingredients,
        Milliseconds timeout
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    std::string Pack(void) const;

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Routine(void);
};

} // !namespace Plazza
