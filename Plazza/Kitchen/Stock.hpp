///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Pizza/Ingredients.hpp"
#include "Concurrency/Thread.hpp"
#include "Concurrency/CondVar.hpp"
#include <chrono>
#include <map>
#include <mutex>

///////////////////////////////////////////////////////////////////////////////
// Namespace Plazza
///////////////////////////////////////////////////////////////////////////////
namespace Plazza
{

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
class Kitchen;

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Stock : public Thread
{
private:
    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    std::chrono::milliseconds m_restockTime;    //<!
    std::map<Ingredient, int> m_stock;          //<!
    Kitchen& m_kitchen;                         //<!
    std::mutex m_mutex;                         //<!
    CondVar m_cv;                               //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param restockTime
    ///
    ///////////////////////////////////////////////////////////////////////////
    Stock(std::chrono::milliseconds restockTime, Kitchen& kitchen);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~Stock();

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param ingredients
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool TryReserveIngredients(const std::vector<Ingredient>& ingredients);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param ingredients
    /// \param timeout
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool WaitAndReserveIngredients(
        const std::vector<Ingredient>& ingredients,
        std::chrono::milliseconds timeout
    );

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Routine(void);
};

} // !namespace Plazza
