///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Concurrency/Process.hpp"
#include "Kitchen/Cook.hpp"
#include "Kitchen/Stock.hpp"
#include "Kitchen/ThreadPool.hpp"
#include <vector>
#include <memory>
#include <atomic>

///////////////////////////////////////////////////////////////////////////////
// Namespace Plazza
///////////////////////////////////////////////////////////////////////////////
namespace Plazza
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Kitchen : public Process
{
private:
    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    std::chrono::milliseconds m_restockTime;    //<!
    double m_multiplier;                        //<!
    size_t m_cookCount;                         //<!
    std::atomic<bool> m_running;                //<!
    std::atomic<int> m_activePizzaCount;        //<!
    std::atomic<int> m_cooksIdleCount;          //<!
    Stock m_stock;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param numberOfCooks
    /// \param multiplier
    /// \param restockTime
    ///
    ///////////////////////////////////////////////////////////////////////////
    Kitchen(
        size_t numberOfCooks = 1,
        double multiplier = 1.0,
        std::chrono::milliseconds restockTime = std::chrono::milliseconds(1000)
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~Kitchen();

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Routine(void);
};

} // !namespace Plazza
