///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Concurrency/Process.hpp"
#include "Concurrency/CondVar.hpp"
#include "Kitchen/Cook.hpp"
#include "Kitchen/Stock.hpp"
#include "Kitchen/ThreadPool.hpp"
#include "Utils/Timer.hpp"
#include "IPC/Pipe.hpp"
#include <vector>
#include <memory>
#include <atomic>
#include <queue>
#include <Pizza/IPizza.hpp>

///////////////////////////////////////////////////////////////////////////////
// Namespace Plazza
///////////////////////////////////////////////////////////////////////////////
namespace Plazza
{

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
class Stock;

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Kitchen : public Process
{
private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    static size_t s_nextId;

private:
    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    std::chrono::milliseconds m_restockTime;            //<!
    double m_multiplier;                                //<!
    size_t m_cookCount;                                 //<!
    std::atomic<bool> m_running;                        //<!
    std::atomic<int> m_activePizzaCount;                //<!
    std::atomic<int> m_idleCookCount;                   //<!
    std::unique_ptr<Stock> m_stock;                     //<!
    size_t m_id;                                        //<!
    std::unique_ptr<Pipe> m_toReception;                //<!
    std::vector<std::unique_ptr<Cook>> m_cooks;         //<!
    SteadyClock::TimePoint m_forclosureTime;            //<!
    bool m_isRoutineRunning;                            //<!
    std::queue<uint16_t> m_pizzaQueue;                  //<!
    std::mutex m_pizzaQueueMutex;                       //<!
    CondVar m_pizzaQueueCV;                             //<!
    int64_t m_elapsedMs;                                //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    std::unique_ptr<Pipe> pipe;                         //<!
    Message::Status status;                             //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param numberOfCooks
    /// \param multiplier
    /// \param restockTime
    ///
    ///////////////////////////////////////////////////////////////////////////
    Kitchen(
        size_t numberOfCooks = 1,
        double multiplier = 1.0,
        std::chrono::milliseconds restockTime = std::chrono::milliseconds(1000)
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~Kitchen();

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Routine(void);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    size_t GetID(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    void ForClosure(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SendStatus(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    void ForClosureCheck(void);


    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param pizza
    ///
    ///////////////////////////////////////////////////////////////////////////
    void NotifyPizzaCompletion(const IPizza& pizza);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    void RoutineInitialization(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param timeout
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    std::optional<uint16_t> TryGetNextPizza(
        std::chrono::milliseconds timeout
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param pizza
    ///
    ///////////////////////////////////////////////////////////////////////////
    void AddPizzaToQueue(uint16_t pizza);
};

} // !namespace Plazza
