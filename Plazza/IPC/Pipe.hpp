///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "IPC/IIPCChannel.hpp"
#include "IPC/Message.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace Plazza
///////////////////////////////////////////////////////////////////////////////
namespace Plazza
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Pipe : public IIPCChannel
{
public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    enum class OpenMode
    {
        READ_ONLY,
        WRITE_ONLY
    };

private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    std::string m_name;         //<!
    OpenMode m_mode;            //<!
    int m_fd;                   //<!
    bool m_errorState;          //<!
    bool m_isCreator;           //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param name
    /// \param mode
    ///
    ///////////////////////////////////////////////////////////////////////////
    Pipe(const std::string& name, OpenMode mode);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~Pipe() override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    Pipe(const Pipe&) = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    ///
    ///////////////////////////////////////////////////////////////////////////
    Pipe(Pipe&& other) noexcept;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    Pipe& operator=(const Pipe&) = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Pipe& operator=(Pipe&& other) noexcept;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param message
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual IIPCChannel& operator<<(const Message& message) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param message
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual IIPCChannel& operator>>(Message& message) override;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void Open(void) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void Close(void) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual bool IsOpen(void) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual bool IsGood(void) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void RemoveResource(void) override;

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param buffer
    /// \param bytes
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool ReadBytes(char* buffer, size_t bytes);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param buffer
    /// \param bytes
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool WriteBytes(const char* buffer, size_t bytes);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void TryCreateFifo(void);
};

} // !namespace Plazza
