///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include <string>
#include <vector>
#include <cstdint>
#include <cstring>

///////////////////////////////////////////////////////////////////////////////
// Namespace Plazza
///////////////////////////////////////////////////////////////////////////////
namespace Plazza
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Message
{
public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    enum class Type : uint8_t
    {
        UNDEFINED = 0,
        // --- Reception to Kitchen ---
        ORDER_PIZZA,
        KITCHEN_STATUS_REQUEST,
        // --- Kitchen to Reception ---
        PIZZA_READY,
        PIZZA_COOKING_UPDATE,
        KITCHEN_STATUS_RESPONSE,
        KITCHEN_CLOSING_NOTIFICATION,
        // --- Generic ---
        ACK,
        NACK,
        ERROR_INFO
    };

public:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    static const size_t MESSAGE_TYPE_SIZE;
    static const size_t PAYLOAD_SIZE_INDICATOR_SIZE;
    static const size_t MESSAGE_HEADER_ONLY_SIZE;

public:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    Type type;                      //<!
    std::vector<char> payload;      //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param type
    /// \param data
    ///
    ///////////////////////////////////////////////////////////////////////////
    Message(Type type = Type::UNDEFINED, std::vector<char> data = {});

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param buffer
    /// \param size
    /// \param out
    /// \param bytes
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static bool Unpack(
        const char* buffer,
        size_t size,
        Message& out,
        size_t& bytes
    );

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    std::vector<char> Pack(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    std::string GetPayloadAsString(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param str
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SetPayloadFromString(const std::string& str);
};

} // !namespace Plazza
