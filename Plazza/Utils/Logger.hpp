///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Utils/Timer.hpp"
#include "Concurrency/Mutex.hpp"
#include <iostream>
#include <string>
#include <fstream>

///////////////////////////////////////////////////////////////////////////////
// Namespace Plazza
///////////////////////////////////////////////////////////////////////////////
namespace Plazza
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Logger
{
private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    static std::string m_logFilePath;   //<!
    static bool m_consoleOutput;        //<!
    static Mutex m_logMutex;            //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    enum class Level
    {
        INFO,
        WARNING,
        ERROR,
        DEBUG
    };

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    Logger(void) = default;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual ~Logger() = default;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param filePath
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void SetLogFile(const std::string& filePath);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param enable
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void SetConsoleOutput(bool enable);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param level
    /// \param sender
    /// \param message
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void Log(
        Level level,
        const std::string& sender,
        const std::string& message
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param sender
    /// \param message
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void Info(const std::string& sender, const std::string& message);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param sender
    /// \param message
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void Warning(const std::string& sender, const std::string& message);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param sender
    /// \param message
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void Error(const std::string& sender, const std::string& message);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param sender
    /// \param message
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void Debug(const std::string& sender, const std::string& message);

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static std::string GetTimestamp(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param level
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static std::string LogLevelToString(Level level);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param logMessage
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void WriteLog(const std::string& logMessage);
};

} // !namespace Plazza
